# This demo modifies the cluster (deploys to it) you must use a service
# account with permission to admin the cluster (or make your default user an admin
# of the `default` namespace with default-cluster-admin.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  generateName: default-cluster-admin-
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: "unit.tests"
spec:
  workspaces:
  - name: source
    mountPath: /workspace/source/go/src/github.com/GoogleContainerTools/skaffold
  steps:
  - name: run-tests
    image: golang
    env:
    - name: GOPATH
      value: /workspace/go
    workingDir: $(workspaces.source.path)
    script: |
      # The intention behind this example Task is to run unit test, however we
      # currently do nothing to ensure that a unit test issue doesn't cause this example
      # to fail unnecessarily. In the future we could re-introduce the unit tests (since
      # we are now pinning the version of Skaffold we pull) or use Tekton Pipelines unit tests.
      echo "pass"
---
# Copied from https://github.com/tektoncd/catalog/blob/v1beta1/kaniko/kaniko.yaml
# Using the catalog fails for unknown reasons, so we're keeping this here.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
spec:
  workspaces:
  - name: source
  params:
  - name: IMAGE
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    default: ""
  - name: BUILDER_IMAGE
    description: The image on which builds will run
    default: gcr.io/kaniko-project/executor:v1.8.1
  - name: baseImage
    description: Base image for GoogleContainerTools/skaffold microservice apps
    default: BASE=alpine:3.9
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  steps:
  - name: build-and-push
    workingDir: $(workspaces.source.path)
    image: $(params.BUILDER_IMAGE)
    # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
    # https://github.com/tektoncd/pipeline/pull/706
    env:
    - name: DOCKER_CONFIG
      value: /tekton/home/.docker
    command:
    - /kaniko/executor
    - $(params.EXTRA_ARGS)
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE)
    - --oci-layout-path=$(workspaces.source.path)/$(params.CONTEXT)/image-digest
    - --build-arg=$(inputs.params.baseImage)
    - --ignore-path=/product_uuid # TODO(abayer): Work around Kaniko multi-stage build issues on Kind: https://github.com/GoogleContainerTools/kaniko/issues/2164
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    securityContext:
      runAsUser: 0
  - name: write-digest
    workingDir: $(workspaces.source.path)
    image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/imagedigestexporter:latest
    # output of imagedigestexport [{"name":"image","digest":"sha256:eed29..660"}]
    command: ["/ko-app/imagedigestexporter"]
    securityContext:
      runAsUser: 0
    args:
    - -images=[{"name":"$(params.IMAGE)","type":"image","url":"$(params.IMAGE)","digest":"","OutputImageDir":"$(workspaces.source.path)/$(params.CONTEXT)/image-digest"}]
    - -terminationMessagePath=$(params.CONTEXT)/image-digested
  - name: digest-to-results
    workingDir: $(workspaces.source.path)
    image: stedolan/jq
    script: |
      cat $(params.CONTEXT)/image-digested | jq '.[0].value' -rj | tee $(results.IMAGE_DIGEST.path)
---
# This task deploys with kubectl apply -f <filename>
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: demo-deploy-kubectl
spec:
  params:
  - name: path
    description: Path to the manifest to apply
  - name: yqArg
    description: Okay this is a hack, but I didn't feel right hard-coding `-d1` down below
  - name: yamlPathToImage
    description: The path to the image to replace in the yaml manifest (arg to yq)
  - name: imageURL
    description: The URL of the image to deploy
  workspaces:
  - name: source
  steps:
  - name: replace-image
    image: mikefarah/yq:3
    command: ['yq']
    args:
    - "w"
    - "-i"
    - "$(params.yqArg)"
    - "$(params.path)"
    - "$(params.yamlPathToImage)"
    - "$(params.imageURL)"
  - name: run-kubectl
    image: lachlanevenson/k8s-kubectl
    command: ['kubectl']
    args:
    - 'apply'
    - '-f'
    - '$(params.path)'
---
# This Pipeline Builds two microservice images(https://github.com/GoogleContainerTools/skaffold/tree/master/examples/microservices)
# from the Skaffold repo (https://github.com/GoogleContainerTools/skaffold) and deploys them to the repo currently running Tekton Pipelines.
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: "demo.pipeline"
spec:
  params:
  - name: image-registry
    default: gcr.io/christiewilson-catfactory
  workspaces:
  - name: git-source
  tasks:
  - name: fetch-from-git
    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/tektoncd/catalog.git
      - name: pathInRepo
        value: /task/git-clone/0.9/git-clone.yaml
      - name: revision
        value: main
    params:
    - name: url
      value: https://github.com/GoogleContainerTools/skaffold
    - name: revision
      value: v1.32.0
    workspaces:
    - name: output
      workspace: git-source
  - name: skaffold-unit-tests
    runAfter: [fetch-from-git]
    taskRef:
      name: "unit.tests"
    workspaces:
    - name: source
      workspace: git-source
  - name: build-skaffold-web
    runAfter: [skaffold-unit-tests]
    taskRef:
      name: kaniko
    params:
    - name: IMAGE
      value: $(params.image-registry)/leeroy-web
    - name: CONTEXT
      value: examples/microservices/leeroy-web
    - name: DOCKERFILE
      value: $(workspaces.source.path)/examples/microservices/leeroy-web/Dockerfile
    workspaces:
    - name: source
      workspace: git-source
  - name: build-skaffold-app
    runAfter: [skaffold-unit-tests]
    taskRef:
      name: kaniko
    params:
    - name: IMAGE
      value: $(params.image-registry)/leeroy-app
    - name: CONTEXT
      value: examples/microservices/leeroy-app
    - name: DOCKERFILE
      value: $(workspaces.source.path)/examples/microservices/leeroy-app/Dockerfile
    workspaces:
    - name: source
      workspace: git-source
  - name: deploy-app
    taskRef:
      name: demo-deploy-kubectl
    params:
    - name: imageURL
      value: $(params.image-registry)/leeroy-app@$(tasks.build-skaffold-app.results.IMAGE_DIGEST)
    - name: path
      value: $(workspaces.source.path)/examples/microservices/leeroy-app/kubernetes/deployment.yaml
    - name: yqArg
      value: "-d1"
    - name: yamlPathToImage
      value: "spec.template.spec.containers[0].image"
    workspaces:
    - name: source
      workspace: git-source
  - name: deploy-web
    taskRef:
      name: demo-deploy-kubectl
    params:
    - name: imageURL
      value: $(params.image-registry)/leeroy-web@$(tasks.build-skaffold-web.results.IMAGE_DIGEST)
    - name: path
      value: $(workspaces.source.path)/examples/microservices/leeroy-web/kubernetes/deployment.yaml
    - name: yqArg
      value: "-d0"
    - name: yamlPathToImage
      value: "spec.template.spec.containers[0].image"
    workspaces:
    - name: source
      workspace: git-source
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: demo-pipeline-run-1
spec:
  pipelineRef:
    name: "demo.pipeline"
  serviceAccountName: 'default'
  workspaces:
  - name: git-source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
